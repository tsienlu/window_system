<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 启用 aop -->
	<aop:aspectj-autoproxy/>
	
	<!-- 启用 annotation -->
	<context:annotation-config />
	<mvc:annotation-driven/>
	
	<!-- spring 注解 扫描的路径 -->
	<context:component-scan base-package="com.vaolan" />  <!-- 自动扫描所有注解该路径 -->
	
	<!-- 定时器注解配置 -->
	<task:annotation-driven/>
	<!-- 定时器配置文件 -->
	<context:property-placeholder location="classpath:timer.properties"/>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" /> -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/view/" p:suffix=".jsp" />
	
	<!-- 获取 applicationContext 的对象的bean -->
	<bean id="springContextManager" class="com.hidata.framework.util.spring.SpringContextManager"></bean>
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="utf-8" />
	
	<mvc:resources mapping="/resources/**" location="/resources/" />  
	<mvc:resources mapping="/upload/**" location="/upload/" />  
	
    <!-- SSDB注册连接池 -->
	<bean id="SSDBRegister"
		class="com.hidata.framework.ssdb.SSDBRegister">
		<property name="ipAddress" value="61.152.73.246" /><!-- 地址 -->
		<property name="port" value="8889" /><!-- 端口号-->
		<property name="timeout" value="2000" /><!-- 超时时间 -->
		<property name="maxActive" value="1000" /><!-- 最大激活活动 -->
		<property name="maxIdle" value="5" /><!-- 最大闲置进程-->
		<property name="maxWait" value="1000" /><!-- 超时时间 -->
	</bean>
	
	<!-- jedisPool配置信息 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="1000"/> <!-- 控制一个pool可分配多少个jedis实例 -->
		<property name="maxIdle" value="200" />   <!-- 控制一个pool最多有多少个状态为idle(空闲)的jedis实例 -->
		<property name="maxWaitMillis" value="2000" />  <!-- 表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException -->
		<property name="testOnBorrow" value="true" /> <!-- 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的 -->
	<!--	<property name="testOnReturn" value="true" />  在return给pool时，是否提前进行validate操作 -->
	</bean>
	
	<!--<bean id="jedisWritePoolOne" class="com.hidata.framework.cache.redis.JedisPoolWriper" destroy-method="destroy"  depends-on="jedisPoolConfig">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />--> <!-- 加载jedisPool配置信息 -->
		<!-- redis主机地址 -->
		<!-- redis连接端口 -->
		<!--  
		<constructor-arg name="host" value="192.168.21.167" />
		<constructor-arg name="port" value="6379"/> 
		-->
		<!--<constructor-arg name="host" value="192.168.1.110" />
		<constructor-arg name="port" value="5555"/> -->
   	<!--</bean>-->
</beans>  