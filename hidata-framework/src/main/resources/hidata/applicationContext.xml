<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"  xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- 定义受环境影响易变的变量 -->
	<bean class="com.hidata.framework.util.PropertyPlaceholderConfigurerUtil">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath:application.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="parentDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">  
          <property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
		  <property name="minPoolSize" value="${jdbc.minPoolSize}"></property>
		  <property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
		  <property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
		  <property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>
		  <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"></property>
		  <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"></property>
		  <property name="maxStatements" value="${jdbc.maxStatements}"></property>
		  <property name="testConnectionOnCheckout" value="${jdbc.testConnectionOnCheckout}"></property>
		  <property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}"></property>
		  <property name="breakAfterAcquireFailure" value="${jdbc.breakAfterAcquireFailure}"></property>
		  
	</bean>

	<bean id="dataSourceWrite" class="com.mchange.v2.c3p0.ComboPooledDataSource" parent="parentDataSource">
		<property name="driverClass" value="${jdbc.driver.write}" />
		<property name="jdbcUrl" value="${jdbc.url.write}" />
		<property name="user" value="${jdbc.username.write}" />
		<property name="password" value="${jdbc.password.write}"></property>
	</bean>
	
	<bean id="dataSourceRead" class="com.mchange.v2.c3p0.ComboPooledDataSource" parent="parentDataSource">
		<property name="driverClass" value="${jdbc.driver.read}" />
		<property name="jdbcUrl" value="${jdbc.url.read}" />
		<property name="user" value="${jdbc.username.read}" />
		<property name="password" value="${jdbc.password.read}"></property>
	</bean>
	
	<!-- 动态数据源 -->
	<bean id="dynamicDataSource" class="com.hidata.framework.db.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="dataSourceRead" key="dataSourceRead"></entry>
				<entry value-ref="dataSourceWrite" key="dataSourceWrite"></entry>
			</map>
		</property>
			<property name="defaultTargetDataSource" ref="dataSourceWrite">
		</property>
	</bean>
	
	<!-- 启用aop -->
	<aop:aspectj-autoproxy/>
	
	<!-- 启用 annotation -->
	<context:annotation-config />
	
	<!-- spring注解，需要单独配置扫描，以让事物生效。-->
	<context:component-scan base-package="com.hidata.framework" />

	<!-- 事务管理配置 -->
	<!-- 配置事务管理开始 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource"></property>
	</bean>


	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<!-- 默认是写数据源，程序中将其改为读数据源 -->
			<ref bean="dynamicDataSource" />
		</property>
	</bean>
    
</beans>  
