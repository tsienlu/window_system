<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       http://www.springframework.org/schema/task   
       http://www.springframework.org/schema/task/spring-task-3.0.xsd">
       
	<!-- 启用 aop -->
	<aop:aspectj-autoproxy />

	<!-- 启用 annotation -->
	<context:annotation-config />
	<mvc:annotation-driven />
	<task:annotation-driven/>

	<!-- spring 注解 扫描的路径 -->
	<context:component-scan base-package="com.vaolan" />  <!-- 自动扫描所有注解该路径 -->

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" 
		/> -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/" p:suffix=".jsp" />

	<!-- 获取 applicationContext 的对象的bean -->
	<bean id="springContextManager" class="com.hidata.framework.util.spring.SpringContextManager"></bean>
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="utf-8" />

	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="2" /><!-- 核心线程数 -->
		<property name="maxPoolSize" value="20" /><!-- 最大线程数 -->
		<property name="keepAliveSeconds" value="500" /><!-- 线程所允许的空闲时间 -->
		<property name="queueCapacity" value="500" /><!-- 工作队列最大长度 -->
	</bean>
	
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
	<!-- jedisPool配置信息 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="1000"/> <!-- 控制一个pool可分配多少个jedis实例 -->
		<property name="maxIdle" value="200" />   <!-- 控制一个pool最多有多少个状态为idle(空闲)的jedis实例 -->
		<property name="maxWaitMillis" value="2000" />  <!-- 表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException -->
		<property name="testOnBorrow" value="true" /> <!-- 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的 -->
	<!--	<property name="testOnReturn" value="true" />  在return给pool时，是否提前进行validate操作 -->
	</bean>
	
	
	<!--广告的实时统计信息 -->
	<bean id="jedisPool_adstat" class="com.hidata.framework.cache.redis.JedisPoolWriper" destroy-method="destroy"  depends-on="jedisPoolConfig">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" /> <!-- 加载jedisPool配置信息 -->
		<constructor-arg name="host" value="10.71.48.139" />
		<constructor-arg name="port" value="6479"/>
<!--  		<constructor-arg name="host" value="180.96.26.130" /> -->
<!-- 		<constructor-arg name="port" value="6579"/> -->
	</bean>
	
	<!-- 6379,6380,6381,6382存储离线人群的adua -->
		<bean id="jedisPool20_6379" class="com.hidata.framework.cache.redis.JedisPoolWriper" destroy-method="destroy"  depends-on="jedisPoolConfig">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" /> <!-- 加载jedisPool配置信息 -->
		<constructor-arg name="host" value="10.71.48.138" />
		<constructor-arg name="port" value="6379"/>
<!--  		<constructor-arg name="host" value="180.96.26.130" /> -->
<!-- 		<constructor-arg name="port" value="6384"/> -->
	</bean>
		
		<bean id="jedisPool20_6380" class="com.hidata.framework.cache.redis.JedisPoolWriper" destroy-method="destroy"  depends-on="jedisPoolConfig">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" /> <!-- 加载jedisPool配置信息 -->
		<constructor-arg name="host" value="10.71.48.138" />
		<constructor-arg name="port" value="6380"/>
<!--  		<constructor-arg name="host" value="180.96.26.130" /> -->
<!-- 		<constructor-arg name="port" value="6380"/> -->
	</bean>
		
		<bean id="jedisPool20_6381" class="com.hidata.framework.cache.redis.JedisPoolWriper" destroy-method="destroy"  depends-on="jedisPoolConfig">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" /> <!-- 加载jedisPool配置信息 -->
		<constructor-arg name="host" value="10.71.48.138" />
		<constructor-arg name="port" value="6381"/> 
<!--  		<constructor-arg name="host" value="180.96.26.130" /> -->
<!-- 		<constructor-arg name="port" value="6381"/>  -->
	</bean>
		
		<bean id="jedisPool20_6382" class="com.hidata.framework.cache.redis.JedisPoolWriper" destroy-method="destroy"  depends-on="jedisPoolConfig">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" /> <!-- 加载jedisPool配置信息 -->
		<constructor-arg name="host" value="10.71.48.138" />
		<constructor-arg name="port" value="6382"/> 
<!--  		<constructor-arg name="host" value="180.96.26.130" /> -->
<!-- 		<constructor-arg name="port" value="6382"/>  -->
	</bean>
	
		
		<!-- 既搜既投存储的adua 2 adids 对应关系 -->
		<bean id="jedisPool20_6383" class="com.hidata.framework.cache.redis.JedisPoolWriper" destroy-method="destroy"  depends-on="jedisPoolConfig">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" /> <!-- 加载jedisPool配置信息 -->
		<constructor-arg name="host" value="10.71.48.138" />
		<constructor-arg name="port" value="6383"/>
<!--  		<constructor-arg name="host" value="180.96.26.130" /> -->
<!-- 		<constructor-arg name="port" value="6383"/> -->
	</bean>
	
		
		<!-- 专门用来记录临时key的redis,包括impuuid,作弊处理的 -->
		<bean id="jedisPool20_6400" class="com.hidata.framework.cache.redis.JedisPoolWriper" destroy-method="destroy"  depends-on="jedisPoolConfig">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" /> <!-- 加载jedisPool配置信息 -->
		<constructor-arg name="host" value="10.71.48.138" />
		<constructor-arg name="port" value="6400"/> 
<!--  		<constructor-arg name="host" value="180.96.26.130" /> -->
<!-- 		<constructor-arg name="port" value="6400"/>  -->
	</bean>
	
		<!-- 控制频次，ip次数，uv次数，临时存储记录每个用户次数的 -->
		<bean id="jedisPool20_6401" class="com.hidata.framework.cache.redis.JedisPoolWriper" destroy-method="destroy"  depends-on="jedisPoolConfig">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" /> <!-- 加载jedisPool配置信息 -->
		<constructor-arg name="host" value="10.71.48.138" />
		<constructor-arg name="port" value="6401"/> 
<!--  		<constructor-arg name="host" value="180.96.26.130" /> -->
<!-- 		<constructor-arg name="port" value="6401"/>  -->
	</bean>
	
		
		
		
<!-- 	<bean id="SSDBRegister14_8890" class=" com.hidata.framework.ssdb.SSDBRegister" > -->
<!-- 		<property name="ipAddress" value="192.168.21.61"/> -->
<!-- 		<property name="port" value="8891"/> -->
<!-- 		<property name="timeout" value="1000"/> -->
<!-- 		<property name="maxActive" value="20"/> -->
<!-- 		<property name="maxIdle" value="5"/> -->
<!-- 		<property name="maxWait" value="10"/> -->
<!-- 	</bean> -->
	
	<bean name="dbinfo" class="com.vaolan.sspserver.timer.DBInfoFresh" destroy-method="destroy" />
	<task:scheduled-tasks>
		<task:scheduled ref="dbinfo" method="freshAdvInfo" cron="0 3 0 * * ?" /><!-- 每天凌晨零点3分钟 -->
		<task:scheduled ref="dbinfo" method="getPvCount" cron="0 0/1 * * * ?" /><!-- 每隔1分钟 -->
		<task:scheduled ref="dbinfo" method="getadMinMap" cron="0/3 * * * * ?" /><!-- 每隔3秒触发 -->
		
	</task:scheduled-tasks>
	
</beans>  